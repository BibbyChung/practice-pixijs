import{B as M,g as u,t as X,s as Y,i as w}from"./index-YpI8y5Bw.js";class D extends M{getQuery(){return this._ge.miniplexECS.without("createComponent").with("moveComponent").with("collisionComponent").onEntityAdded}execute(){this.getQuery().subscribe(o=>{const s=o;if(s.pixiElem){const c=u().pipe(X(({delta:Q,qTree:C})=>{var m;if(((m=o.destroyComponent)==null?void 0:m.isDestroy)??!1){Y(c);return}const l=C.retrieve(o.collisionComponent.bounds);if(l)for(const r of l){const a=r.entity,p=a;if(s.ecsEntityId===p.ecsEntityId)continue;const e=s.pixiElem,t=o.collisionComponent.bounds,n=p.pixiElem,i=a.collisionComponent.bounds;if(!o.collisionComponent.isCollision&&w(t,i)){o.collisionComponent.isCollision=!0;const h=e.position.x+t.width/2,g=e.position.x-t.width/2,f=e.position.y+t.height/2,v=e.position.y-t.height/2,d=n.position.x+i.width/2,x=n.position.x-i.width/2,y=n.position.y+i.height/2,b=n.position.y-i.height/2;h>d&&(o.moveComponent.velocityX=Math.abs(o.moveComponent.velocityX)),g<x&&(o.moveComponent.velocityX=Math.abs(o.moveComponent.velocityX)*-1),f>y&&(o.moveComponent.velocityY=Math.abs(o.moveComponent.velocityY)),v<b&&(o.moveComponent.velocityY=Math.abs(o.moveComponent.velocityY)*-1),o.collisionComponent.isCollision=!1}}})).subscribe()}})}}export{D as CollisionSystem};
