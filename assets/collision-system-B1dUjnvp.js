import{B as X,g as Y,t as B,s as M,i as w}from"./index-qMX9NPDX.js";class S extends X{getQuery(){return this._ge.miniplexECS.without("createComponent").with("moveComponent").with("collisionComponent").onEntityAdded}execute(){this.getQuery().subscribe(o=>{const s=o;if(s.pixiElem){const g=Y().pipe(B(({delta:u,qTree:r})=>{var h;if(((h=o.destroyComponent)==null?void 0:h.isDestroy)??!1){M(g);return}const i=s.pixiElem,e=o.collisionComponent.bounds,m=i.position.x-e.width/2,l=i.position.x+e.width/2,p=i.position.y-e.height/2,a=i.position.y+e.height/2;m<0&&(o.moveComponent.velocityX=Math.abs(o.moveComponent.velocityX)),l>this._ge.screenWitdh&&(o.moveComponent.velocityX=Math.abs(o.moveComponent.velocityX)*-1),p<0&&(o.moveComponent.velocityY=Math.abs(o.moveComponent.velocityY)),a>this._ge.screenHeight&&(o.moveComponent.velocityY=Math.abs(o.moveComponent.velocityY)*-1);const c=r.retrieve(o.collisionComponent.bounds);if(c.length!==0)for(const f of c){const v=f.entity,C=v;if(s.ecsEntityId===C.ecsEntityId)continue;const n=C.pixiElem,t=v.collisionComponent.bounds;if(!o.collisionComponent.isCollision&&w(e,t)){o.collisionComponent.isCollision=!0;const d=n.position.x-t.width/2,b=n.position.x+t.width/2,y=n.position.y-t.height/2,x=n.position.y+t.height/2;(l>b||l<0)&&(o.moveComponent.velocityX=Math.abs(o.moveComponent.velocityX)),(m<d||m>this._ge.screenWitdh)&&(o.moveComponent.velocityX=Math.abs(o.moveComponent.velocityX)*-1),(a>x||a<0)&&(o.moveComponent.velocityY=Math.abs(o.moveComponent.velocityY)),(p<y||p>this._ge.screenHeight)&&(o.moveComponent.velocityY=Math.abs(o.moveComponent.velocityY)*-1),o.collisionComponent.isCollision=!1}}})).subscribe()}})}}export{S as CollisionSystem};
